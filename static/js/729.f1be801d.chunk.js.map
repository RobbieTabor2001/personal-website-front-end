{"version":3,"file":"static/js/729.f1be801d.chunk.js","mappings":"yKAGA,MAiDA,EAjDoBA,IAAe,IAAd,KAAEC,GAAMD,EAC3B,MAAOE,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAkB3C,OAhBAC,EAAAA,EAAAA,YAAU,KACJJ,GACFK,QAAQC,IACNN,EAAKO,OAAOC,KAAKC,GACfC,MAAM,GAADC,OAAIC,wBAAkC,sBAAAD,OAAqBE,mBAAmBJ,KAChFK,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,GAASA,EAAKC,WACpBC,OAAOC,IACNC,QAAQD,MAAM,6BAA8BA,GACrC,SAGbN,KAAKZ,EACT,GACC,CAACF,IAECA,GAKHsB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKvB,EAAKyB,QACVD,EAAAA,EAAAA,KAAA,KAAAD,SAAIvB,EAAK0B,eACTF,EAAAA,EAAAA,KAAA,OAAAD,SACGtB,EAAUO,KAAI,CAACmB,EAAKC,KACnBJ,EAAAA,EAAAA,KAAA,OAEEG,IAAKA,EACLE,IAAG,GAAAlB,OAAKX,EAAKyB,KAAI,KAAAd,OAAIiB,EAAQ,GAC7BE,MAAO,CAAEC,MAAO,OAAQC,aAAc,SAHjCL,GAAOC,WAVbJ,EAAAA,EAAAA,KAAA,OAAAD,SAAK,kBAiBN,ECJV,EAhCiBU,KACf,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,OACZnC,EAAMoC,IAAWjC,EAAAA,EAAAA,UAAS,MA2BjC,OAzBAC,EAAAA,EAAAA,YAAU,KACoBiC,WAC1B,IAEE,MAAMC,EAAM,GAAA3B,OAAMC,wBAAkC,eAAAD,OAAcuB,GAE5DnB,QAAiBL,MAAM4B,GAC7B,IAAKvB,EAASwB,GACZ,MAAM,IAAIC,MAAM,+BAGlB,MAAMC,QAAiB1B,EAASC,OAEhCoB,EAAQK,EAIV,CAHE,MAAOrB,GACPC,QAAQD,MAAM,oCAAqCA,EAErD,GAIFsB,EAAqB,GACpB,CAACR,IAGGlC,GAAOwB,EAAAA,EAAAA,KAACmB,EAAW,CAAC3C,KAAMA,KAAWwB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,cAAgB,C","sources":["components/Gallery/ItemDisplay.js","pages/ItemView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ItemDisplay = ({ item }) => {\n  const [imageUrls, setImageUrls] = useState([]);\n\n  useEffect(() => {\n    if (item) {\n      Promise.all(\n        item.images.map((imagePath) => (\n          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/s3/image-url/${encodeURIComponent(imagePath)}`)\n            .then((response) => response.json())\n            .then((data) => data.imageUrl)\n            .catch((error) => {\n              console.error('Failed to fetch image URL:', error);\n              return ''; // Return an empty string or some placeholder on error\n            })\n        )),\n      ).then(setImageUrls); // Update state with all fetched URLs\n    }\n  }, [item]); // Rerun effect if item changes\n\n  if (!item) {\n    return <div>Item not found</div>;\n  }\n\n  return (\n    <div>\n      <h2>{item.name}</h2>\n      <p>{item.description}</p>\n      <div>\n        {imageUrls.map((src, index) => (\n          <img\n            key={src || index}\n            src={src}\n            alt={`${item.name} ${index + 1}`}\n            style={{ width: '100%', marginBottom: '10px' }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nItemDisplay.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  }).isRequired,\n};\n\nexport default ItemDisplay;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ItemDisplay from '../components/Gallery/ItemDisplay'; // Adjust the path as necessary\n\nconst ItemView = () => {\n  const { itemId } = useParams(); // Access the itemId parameter\n  const [item, setItem] = useState(null); // Initialize item state\n\n  useEffect(() => {\n    const fetchItemWithImages = async () => {\n      try {\n        // Construct the URL for the API call\n        const apiUrl = `${process.env.REACT_APP_API_BASE_URL}/api/items/${itemId}`;\n        // Fetch the item with images from the API\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        // Parse the JSON response\n        const itemData = await response.json();\n        // Set the fetched item data to state\n        setItem(itemData);\n      } catch (error) {\n        console.error('Failed to fetch item with images:', error);\n        // Handle the error state as appropriate\n      }\n    };\n\n    // Invoke the fetch function\n    fetchItemWithImages();\n  }, [itemId]); // Depend on itemId to re-fetch if it changes\n\n  // Conditional rendering: Only render the ItemDisplay component if item data is available\n  return item ? <ItemDisplay item={item} /> : <div>Loading...</div>;\n};\n\nexport default ItemView;\n"],"names":["_ref","item","imageUrls","setImageUrls","useState","useEffect","Promise","all","images","map","imagePath","fetch","concat","process","encodeURIComponent","then","response","json","data","imageUrl","catch","error","console","_jsxs","children","_jsx","name","description","src","index","alt","style","width","marginBottom","ItemView","itemId","useParams","setItem","async","apiUrl","ok","Error","itemData","fetchItemWithImages","ItemDisplay"],"sourceRoot":""}